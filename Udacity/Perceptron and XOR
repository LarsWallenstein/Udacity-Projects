{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Perceptron and XOR","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python2","display_name":"Python 2"}},"cells":[{"metadata":{"id":"fb3mc4cmZWEk","colab_type":"code","colab":{}},"cell_type":"code","source":["#-----------------------------------\n","\n","#\n","#   In this exercise you will put the finishing touches on a perceptron class\n","#\n","#   Finish writing the activate() method by using numpy.dot and adding in the thresholded\n","#   activation function\n","\n","import numpy\n","\n","class Perceptron:\n","\n","    weights = [1]\n","    threshold = 0\n","    \n","    def activate(self,values):\n","        '''Takes in @param values, a list of numbers.\n","        @return the output of a threshold perceptron with\n","        given weights and threshold, given values as inputs.\n","        ''' \n","               \n","        \n","        #YOUR CODE HERE\n","       \n","        #TODO: calculate the strength with which the perceptron fires\n","        strength = numpy.dot(values, self.weights)\n","        #TODO: return 0 or 1 based on the threshold\n","        result = 1 if strength>=self.threshold else 0\n","        return result\n","\n","        \n","        \n","    def __init__(self,weights=None,threshold=None):\n","        if weights:\n","            self.weights = weights\n","        if threshold:\n","            self.threshold = threshold"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3iw0dzrVa6gz","colab_type":"code","colab":{}},"cell_type":"code","source":["p = Perceptron([2,4],2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"QBqGxsLeba8C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"5b8d8d76-c8dd-4efe-9776-03363c2e3636","executionInfo":{"status":"ok","timestamp":1547285968161,"user_tz":-180,"elapsed":688,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["print p.weights"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[2, 4]\n"],"name":"stdout"}]},{"metadata":{"id":"O-q3dXsubfGR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"e6ca0cfa-48b0-4c6f-c319-2369f027f002","executionInfo":{"status":"ok","timestamp":1547286028150,"user_tz":-180,"elapsed":1403,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["p.activate([0,0])"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":8}]},{"metadata":{"id":"2Ve11w1QbndC","colab_type":"code","colab":{}},"cell_type":"code","source":["p = Perceptron([1],0)\n","X=[ i for i in numpy.arange(-5,6,0.001)]\n","Y=[p.activate(i) for i in X]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"X0v_970fcIzh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":347},"outputId":"a79fa09d-7431-4ec3-d1d5-49e4fb3dbf12","executionInfo":{"status":"ok","timestamp":1547286526178,"user_tz":-180,"elapsed":645,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.plot(X,Y)\n","plt.show()"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7ff7c669a4d0>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"B-6wLMkncLYZ","colab_type":"code","colab":{}},"cell_type":"code","source":["#-----------------------------------\n","\n","#\n","#   In this exercise we write a perceptron class\n","#   which can update its weights\n","#\n","#   Your job is to finish the train method so that it implements the perceptron update rule\n","\n","import numpy as np\n","\n","class Perceptron:\n","\n","    weights = [1]\n","    threshold = 0\n","    \n","    def activate(self,values):\n","        '''Takes in @param values, @param weights lists of numbers\n","        and @param threshold a single number.\n","        @return the output of a threshold perceptron with\n","        given weights and threshold, given values as inputs.\n","        ''' \n","               \n","        #First calculate the strength with which the perceptron fires\n","        strength = np.dot(values,self.weights)\n","        \n","        if strength>self.threshold:\n","            result = 1\n","        else:\n","            result = 0\n","            \n","        return result\n","\n","    def update(self,values,train,eta=.1):\n","        '''Takes in a 2D array @param values and a 1D array @param train,\n","        consisting of expected outputs for the inputs in values.\n","        Updates internal weights according to the perceptron training rule\n","        using these values and an optional learning rate, @param eta.\n","        '''\n","        #YOUR CODE HERE\n","        #update self.weights based on the training data\n","        for i in range(len(values)):\n","          dif=train[i] - self.activate(values[i])\n","          self.weights+=eta*dif*values[i]\n","        \n","        \n","        \n","    def __init__(self,weights=None,threshold=None):\n","        if weights:\n","            self.weights = weights\n","        if threshold:\n","\n","          self.threshold = threshold"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wuskpgsjhogm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"66884a3f-e8e7-476b-f707-a0e5d28aa843","executionInfo":{"status":"ok","timestamp":1547287802311,"user_tz":-180,"elapsed":630,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["c = 'sdas'\n","s = [[1,2],[2,3]]\n","for r in s:\n","  print r\n","  print c\n","print len(s)"],"execution_count":41,"outputs":[{"output_type":"stream","text":["[1, 2]\n","sdas\n","[2, 3]\n","sdas\n","2\n"],"name":"stdout"}]},{"metadata":{"id":"glhDOyXthvFA","colab_type":"code","colab":{}},"cell_type":"code","source":["v=[1,2,3]\n","p1=Perceptron([1,1,-5],0)\n","p2=Perceptron([3,-4,2],0)\n","p3=Perceptron([2,-1],-2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"rwUDEG9hkD5Z","colab_type":"code","colab":{}},"cell_type":"code","source":["o1=p1.activate(v)\n","o2=p2.activate(v)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4DI257J_kLHh","colab_type":"code","colab":{}},"cell_type":"code","source":["o=[o1,o2]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"jr0l88AjkRaZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"50339312-1043-4d1c-afdb-597a4e2b3d35","executionInfo":{"status":"ok","timestamp":1547288397033,"user_tz":-180,"elapsed":425,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["print p3.activate(o)"],"execution_count":51,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"}]},{"metadata":{"id":"t4suxl0YkWSx","colab_type":"code","colab":{}},"cell_type":"code","source":["#\n","#   In this exercise, you will create a network of perceptrons which\n","#   represent the xor function use the same network structure you used\n","#   in the previous quizzes.\n","#\n","#   You will need to do two things:\n","#   First, create a network of perceptrons with the correct weights\n","#   Second, define a procedure EvalNet() which takes in a list of \n","#   inputs and ouputs the value of this network.\n","\n","import numpy as np\n","\n","class Perceptron:\n","\n","    weights = [1]\n","    threshold = 0\n","    \n","    def evaluate(self,values):\n","        '''Takes in @param values, @param weights lists of numbers\n","        and @param threshold a single number.\n","        @return the output of a threshold perceptron with\n","        given weights and threshold, given values as inputs.\n","        ''' \n","               \n","        #First calculate the strength with which the perceptron fires\n","        strength = np.dot(values,self.weights)\n","        \n","        #Then evaluate the return value of the perceptron\n","        if strength >= self.threshold:\n","            result = 1\n","        else:\n","            result = 0\n","\n","        return result\n","\n","    def __init__(self,weights=None,threshold=None):\n","        if weights:\n","            self.weights = weights\n","        if threshold:\n","            self.threshold = threshold\n","            \n","\n","Network = [\n","    #input layer, declare perceptrons here\n","    [ Perceptron([1.5,1.5],2)], \\\n","    #output node, declare one perceptron here\n","    [ Perceptron([1,-2,1],0.5)]\n","]\n","\n","def EvalNetwork(inputValues, Network):\n","    OutputValues=[]\n","    for v in inputValues:\n","      OutputValues.append(Network[1][0].evaluate([v[0],Network[0][0].evaluate(v),v[1]]))\n","    return OutputValues\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"B_HI9uuXpCkj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"add48d36-0332-4d96-84c3-6f4344b6345c","executionInfo":{"status":"ok","timestamp":1547290409153,"user_tz":-180,"elapsed":550,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["EvalNetwork([[1,1],[0,1],[1,0],[0,0]],Network)"],"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1, 1, 0]"]},"metadata":{"tags":[]},"execution_count":68}]},{"metadata":{"id":"BeccycJZsfYJ","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}